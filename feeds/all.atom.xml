<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yuri Prezument</title><link href="http://blog.yprez.com/" rel="alternate"></link><link href="http://blog.yprez.com/feeds/all.atom.xml" rel="self"></link><id>http://blog.yprez.com/</id><updated>2012-10-07T22:00:00+00:00</updated><entry><title>Searching code for "TODO" comments with git grep</title><link href="http://blog.yprez.com/searching-code-for-todo-comments-with-git-grep.html" rel="alternate"></link><updated>2012-10-07T22:00:00+00:00</updated><author><name>Yuri Prezument</name></author><id>tag:blog.yprez.com,2012-10-07:searching-code-for-todo-comments-with-git-grep.html</id><summary type="html">&lt;p&gt;My code, like most code, tends to contain TODO/FIXME comments for things
I don't want to bother with at the time of writing them. Sometimes these
tend to pile up. A quick method of finding those is &lt;cite&gt;git grep&lt;/cite&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git grep TODO
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Today I was looking for &amp;quot;TODO&amp;quot; annotations in an old project,
and completely missed a couple of FIXMEs due to being too lazy to grep for
them. This would have caught them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git grep -e TODO -e FIXME
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that's too much typing, so why not make an alias for it?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
    &lt;span class="na"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;grep -n -e TODO -e FIXME -e XXX -e OPTIMIZE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git todo
celeryconfig.py:7:        &lt;span class="c"&gt;# TODO: find best schedule to avoid query limits&lt;/span&gt;
models.py:38:    &lt;span class="c"&gt;# FIXME: remove this method soon&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, that was fun, back to work...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On a general note - don't let TODOs and FIXMEs pile up in the first
place. If it's easy to fix - fix it. If not, document it or open an issue.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="git"></category><category term="grep"></category><category term="todo"></category></entry><entry><title>Django Bash completion</title><link href="http://blog.yprez.com/django-bash-completion.html" rel="alternate"></link><updated>2012-08-03T22:00:00+00:00</updated><author><name>Yuri Prezument</name></author><id>tag:blog.yprez.com,2012-08-03:django-bash-completion.html</id><summary type="html">&lt;p&gt;A couple of days ago, while browsing the Django repository on Github, I
discovered the &lt;a class="reference external" href="https://github.com/django/django/blob/master/extras/django_bash_completion"&gt;django_bash_completion&lt;/a&gt; script (only took me 2 years to
find it). Shortly after the &lt;cite&gt;mind=blown&lt;/cite&gt; moment I tested it and was
amazed by the results, or rather by the fact that I never knew it existed,
although it's referenced in the &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/django-admin/#bash-completion"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Installation was really simple, and outlined in the script itself:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Testing it out without installing
# =================================
#
# To test out the completion without &amp;quot;installing&amp;quot; this, just run this file
# directly, like so:
#
#     . ~/path/to/django_bash_completion
#
# Note: There's a dot ('.') at the beginning of that command.
#
# After you do that, tab completion will immediately be made available in your
# current Bash shell. But it won't be available next time you log in.
#
# Installing
# ==========
#
# To install this, point to this file from your .bash_profile, like so:
#
#     . ~/path/to/django_bash_completion
#
# Do the same in your .bashrc if .bashrc doesn't invoke .bash_profile.
#
# Settings will take effect the next time you log in.
&lt;/pre&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py &lt;span class="o"&gt;[&lt;/span&gt;TAB&lt;span class="o"&gt;]&lt;/span&gt;
cleanup           diffsettings      inspectdb         runfcgi           sqlall
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since I have Django projects deployed on almost every VPS that I access,
I decided to write a small script to install it on a remote machine easily.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# install_django_bash_completion.sh&lt;/span&gt;

&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/scripts

mkdir &lt;span class="nv"&gt;$DIR&lt;/span&gt;
wget https://raw.github.com/django/django/master/extras/django_bash_completion -P &lt;span class="nv"&gt;$DIR&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\n\n#Django bash comletion:\nsource $DIR/django_bash_completion&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And execute it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cat install_django_bash_completion.sh | ssh my.server.com
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Yes, I know that Zsh auto-completes Django management commands
(and much more), but I prefer to stick with Bash for now.&lt;/li&gt;
&lt;li&gt;The script is located at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages/django/extras&lt;/span&gt;&lt;/tt&gt; when you install
Django. But I wanted something more generic as it's located in different
virtualenvs on every machine.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="django"></category><category term="python"></category><category term="bash"></category></entry><entry><title>Running a Bottle app with Gunicorn</title><link href="http://blog.yprez.com/running-a-bottle-app-with-gunicorn.html" rel="alternate"></link><updated>2012-06-10T14:00:00+00:00</updated><author><name>Yuri Prezument</name></author><id>tag:blog.yprez.com,2012-06-10:running-a-bottle-app-with-gunicorn.html</id><summary type="html">&lt;p&gt;Recently I wrote a simple web tracker at work, using the &lt;a class="reference external" href="http://bottlepy.org/"&gt;Bottle&lt;/a&gt;
microframework.&lt;/p&gt;
&lt;p&gt;Looking back, maybe I should've used &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; instead, as I simply don't see
the reason for stuffing 3,000 lines of code in one file, other than a proof of
concept. But both frameworks are quite similar, and both have quite good
documentation.&lt;/p&gt;
&lt;p&gt;A simple bottle app looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello Bottle!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To switch the server to &lt;a class="reference external" href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt; replace the last line with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;gunicorn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But what if we want to run it using the &lt;tt class="docutils literal"&gt;gunicorn&lt;/tt&gt; executable (to run it with
an &lt;tt class="docutils literal"&gt;init.d&lt;/tt&gt; script)? Here things became more problematic.&lt;/p&gt;
&lt;p&gt;I assumed it would be as simple as simple as running &lt;tt class="docutils literal"&gt;gunicorn myapp&lt;/tt&gt;, but it
was still running the app with the default server.&lt;/p&gt;
&lt;p&gt;It also turns out that Bottle is completely not googlable, and searching for
&lt;tt class="docutils literal"&gt;&amp;quot;bottle python gunicorn&amp;quot;&lt;/tt&gt; just returned random crap. After about half an
hour of digging, the solution turned out to be quite simple... I was missing a
WSGI &amp;quot;app&amp;quot; object.&lt;/p&gt;
&lt;p&gt;Here's the finished app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello Bottle!&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last line sets the &amp;quot;app&amp;quot; object for the WSGI server to run.&lt;/p&gt;
&lt;p&gt;Running the test server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
python hello_bottle.py
&lt;/pre&gt;
&lt;p&gt;Running the app with Gunicorn (with 4 workers):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gunicorn -w 4 hello_bottle:app
&lt;/pre&gt;
&lt;p&gt;Simple enough, but it's still a little annoying that this wasn't available in
the documentation.&lt;/p&gt;
&lt;p&gt;For comparison, in Flask, a hello world app looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &amp;quot;app&amp;quot; object is available right away, so we don't have to guess. And the
first result in Google for &lt;tt class="docutils literal"&gt;&amp;quot;flask gunicorn&amp;quot;&lt;/tt&gt; is a link to the
&lt;a class="reference external" href="http://flask.pocoo.org/docs/deploying/others/"&gt;official documentation&lt;/a&gt;, describing how to run it with various WSGI servers.&lt;/p&gt;
&lt;p&gt;In conclusion: Bottle was fun, the application was very easy to build, and runs
incredibly fast. I think that for the next project that requires a
microframework I will use Flask instead. Even if just for the sake of
comparison.&lt;/p&gt;
</summary><category term="python"></category><category term="bottle"></category><category term="gunicorn"></category></entry><entry><title>Setting Up</title><link href="http://blog.yprez.com/setting-up.html" rel="alternate"></link><updated>2012-05-19T18:00:00+00:00</updated><author><name>Yuri Prezument</name></author><id>tag:blog.yprez.com,2012-05-19:setting-up.html</id><summary type="html">&lt;p&gt;I decided to set up this blog mainly as an experiment.&lt;/p&gt;
&lt;p&gt;I might write might write some Python and software dev related posts sometime
soon.&lt;/p&gt;
&lt;p&gt;This blog is powered by &lt;a class="reference external" href="http://alexis.notmyidea.org/pelican/"&gt;Pelican&lt;/a&gt;, the posts are written in
reStructuredText and it's hosted on &lt;a class="reference external" href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm keeping the &lt;a class="reference external" href="https://github.com/yprez/blog.yprez.com"&gt;source repository&lt;/a&gt; separate from the &lt;a class="reference external" href="https://github.com/yprez/yprez.github.com"&gt;generated files&lt;/a&gt;
repository. Committing to the second when it's ready to update.&lt;/p&gt;
&lt;p&gt;Setting up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git submodule add git@github.com:yprez/yprez.github.com.git output
pelican . --output&lt;span class="o"&gt;=&lt;/span&gt;output --settings&lt;span class="o"&gt;=&lt;/span&gt;settings.py

&lt;span class="nb"&gt;cd &lt;/span&gt;output
git add .
git commit -am&lt;span class="s2"&gt;&amp;quot;Set up blog&amp;quot;&lt;/span&gt;
git push
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="python"></category><category term="pelican"></category></entry></feed>